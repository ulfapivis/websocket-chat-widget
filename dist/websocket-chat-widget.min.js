/**
 * WebSocketChatWidget - A customizable chat widget that connects to a WebSocket server
 * @version 1.0.0
 */
(function(window) {
  'use strict';

  // Check dependencies
  if (!window.DOMPurify || !window.marked) {
    console.error('WebSocketChatWidget requires DOMPurify and marked.js.');
    return;
  }

  class WebSocketChatWidget {
    constructor(config) {
      // Validate required fields
      if (!config || !config.chatId) {
        console.error('WebSocketChatWidget: chatId is required');
        return;
      }
      
      // Default configuration
      const defaults = {
        websocket: {
          url: 'wss://apivisflow.onrender.com/nodes/chatagent',
          autoConnect: true
        },
        chatId: '', 
        theme: {
          primaryColor: '#2563eb',
          secondaryColor: '#1e40af',
          userMessageBg: '#dbeafe',
          userMessageText: '#1e40af',
          botMessageBg: '#f3f4f6',
          botMessageText: '#1f2937',
          systemMessageBg: '#f3f4f6',
          systemMessageText: '#4b5563'
        },
        size: {
          width: '380px',
          height: '550px',
          buttonSize: '60px'
        },
        position: {
          bottom: '20px',
          right: '20px'
        },
        text: {
          headerTitle: 'Chat Support',
          welcomeMessage: 'Welcome! How can I help you today?',
          inputPlaceholder: 'Type your message...'
        },
        icons: {
          chatButton: '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path></svg>',
          userAvatar: '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="7" r="4"></circle><path d="M12 11c-2.21 0-4 1.79-4 4v5h8v-5c0-2.21-1.79-4-4-4z"></path></svg>',
          botAvatar: '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="8" r="5"></circle><path d="M20 21v-2a7 7 0 0 0-14 0v2"></path></svg>',
          sendButton: '<svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><line x1="22" y1="2" x2="11" y2="13"></line><polygon points="22 2 15 22 11 13 2 9 22 2"></polygon></svg>'
        },
        predefinedQuestions: {
          enabled: false,
          position: 'top',
          style: 'button',
          questions: [],
          buttonColor: '#3b82f6',
          textColor: '#ffffff',
          hoverColor: '#2563eb',
          hideAfterSelection: false
        }
      };
      
      // Merge configuration
      this.config = this._mergeConfig(defaults, config);
      
      // Initialize state
      this.socket = null;
      this.isConnected = false;
      this.elements = {};
      this.streamState = {
        currentBotMessage: null,
        activeMessageContent: '',
        isStreaming: false,
        typingIndicator: null,
        currentMessageId: null,
        sendingSpinner: null,
        connectionStatus: null
      };
      
      // Setup dependencies
      marked.setOptions({
        gfm: true,
        breaks: true,
        sanitize: false
      });
      
      // Create unique namespace
      this.namespace = 'ws-chat-' + Math.random().toString(36).substr(2, 9);
      
      // Initialize
      this._createElements();
      this._injectStyles();
      this._attachEvents();
      
      // Create predefined buttons if enabled
      if (this.config.predefinedQuestions.enabled) {
        this._createPredefinedButtons();
      }
      
      // Connect if auto-connect is enabled
      if (this.config.websocket.autoConnect) {
        this.connect();
      }
    }
    
    // Deep merge configuration
    _mergeConfig(defaults, custom) {
      const merged = JSON.parse(JSON.stringify(defaults));
      
      for (const key in custom) {
        if (custom.hasOwnProperty(key)) {
          if (typeof custom[key] === 'object' && custom[key] !== null && 
              typeof merged[key] === 'object' && merged[key] !== null &&
              !Array.isArray(custom[key])) {
            merged[key] = this._mergeConfig(merged[key], custom[key]);
          } else {
            merged[key] = custom[key];
          }
        }
      }
      
      return merged;
    }
    
    // Create DOM elements
    _createElements() {
      // Chat button
      const button = document.createElement('button');
      button.className = `${this.namespace}-button`;
      button.innerHTML = this.config.icons.chatButton;
      document.body.appendChild(button);
      this.elements.button = button;
      
      // Chat panel
      const panel = document.createElement('div');
      panel.className = `${this.namespace}-panel`;
      document.body.appendChild(panel);
      this.elements.panel = panel;
      
      // Header
      const header = document.createElement('div');
      header.className = `${this.namespace}-header`;
      
      const title = document.createElement('div');
      title.textContent = this.config.text.headerTitle;
      
      const close = document.createElement('div');
      close.className = `${this.namespace}-close`;
      close.innerHTML = '&times;';
      
      header.appendChild(title);
      header.appendChild(close);
      panel.appendChild(header);
      this.elements.close = close;
      
      // Messages container
      const messages = document.createElement('div');
      messages.className = `${this.namespace}-messages`;
      panel.appendChild(messages);
      this.elements.messages = messages;
      
      // Welcome message
      if (this.config.text.welcomeMessage) {
        this._addMessage('bot', this.config.text.welcomeMessage);
      }
      
      // Input container
      const inputContainer = document.createElement('div');
      inputContainer.className = `${this.namespace}-input-container`;
      
      const input = document.createElement('input');
      input.type = 'text';
      input.className = `${this.namespace}-input`;
      input.placeholder = this.config.text.inputPlaceholder;
      
      const sendButton = document.createElement('button');
      sendButton.className = `${this.namespace}-send-button`;
      sendButton.innerHTML = this.config.icons.sendButton;
      
      inputContainer.appendChild(input);
      inputContainer.appendChild(sendButton);
      panel.appendChild(inputContainer);
      
      this.elements.input = input;
      this.elements.sendButton = sendButton;
    }
    
    // Inject CSS styles
    _injectStyles() {
      const { theme, size, position } = this.config;
      const ns = this.namespace;
      
      const css = `
        .${ns}-button {
          position: fixed;
          bottom: ${position.bottom};
          right: ${position.right};
          width: ${size.buttonSize};
          height: ${size.buttonSize};
          border-radius: 50%;
          background-color: ${theme.primaryColor};
          color: white;
          display: flex;
          align-items: center;
          justify-content: center;
          cursor: pointer;
          border: none;
          box-shadow: 0 2px 10px rgba(0,0,0,0.2);
          z-index: 9999;
          transition: transform 0.2s;
        }
        
        .${ns}-button:hover {
          transform: scale(1.05);
        }
        
        .${ns}-panel {
          position: fixed;
          bottom: calc(${position.bottom} + 80px);
          right: ${position.right};
          width: ${size.width};
          height: ${size.height};
          background: white;
          border-radius: 10px;
          box-shadow: 0 5px 15px rgba(0,0,0,0.2);
          display: none;
          flex-direction: column;
          overflow: hidden;
          z-index: 9998;
        }
        
        .${ns}-header {
          background: ${theme.primaryColor};
          color: white;
          padding: 15px;
          display: flex;
          justify-content: space-between;
          align-items: center;
          font-weight: bold;
        }
        
        .${ns}-close {
          cursor: pointer;
          font-size: 20px;
        }
        
        .${ns}-messages {
          flex: 1;
          padding: 15px;
          overflow-y: auto;
          display: flex;
          flex-direction: column;
        }
        
        .${ns}-message-container {
          display: flex;
          max-width: 85%;
          margin-bottom: 10px;
          gap: 10px;
        }
        
        .${ns}-bot-container {
          align-self: flex-start;
        }
        
        .${ns}-user-container {
          align-self: flex-end;
        }
        
        .${ns}-avatar {
          width: 32px;
          height: 32px;
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          flex-shrink: 0;
          color: white;
        }
        
        .${ns}-bot-avatar {
          background-color: ${theme.primaryColor};
          margin-right: 10px;
        }
        
        .${ns}-user-avatar {
          background-color: ${theme.secondaryColor};
          margin-right: 10px;
        }
        
        .${ns}-message {
          padding: 10px 15px;
          border-radius: 18px;
          overflow-wrap: break-word;
        }
        
        .${ns}-bot-message {
          background-color: ${theme.botMessageBg};
          color: ${theme.botMessageText};
          border-radius: 18px 18px 18px 0;
        }
        
        .${ns}-user-message {
          background-color: ${theme.userMessageBg};
          color: ${theme.userMessageText};
          border-radius: 18px 18px 0 18px;
        }
        
        .${ns}-system-message {
          align-self: center;
          background-color: ${theme.systemMessageBg};
          color: ${theme.systemMessageText};
          text-align: center;
          border-radius: 8px;
          padding: 8px 12px;
          margin: 10px 0;
          font-size: 0.875rem;
        }
        
        .${ns}-connection-status {
          align-self: center;
          padding: 8px 12px;
          border-radius: 4px;
          font-size: 0.875rem;
          margin: 10px 0;
          background-color: #dcfce7;
          color: #166534;
          opacity: 1;
          transition: opacity 0.5s ease-out;
        }
        
        .${ns}-input-container {
          display: flex;
          padding: 10px;
          border-top: 1px solid #e5e7eb;
        }
        
        .${ns}-input {
          flex: 1;
          padding: 10px 15px;
          border-radius: 24px;
          border: 1px solid #d1d5db;
          margin-right: 10px;
          outline: none;
          font-size: 16px;
        }
        
        .${ns}-input:focus {
          border-color: ${theme.primaryColor};
        }
        
        .${ns}-send-button {
          background: ${theme.primaryColor};
          color: white;
          border: none;
          border-radius: 50%;
          width: 40px;
          height: 40px;
          cursor: pointer;
          display: flex;
          align-items: center;
          justify-content: center;
        }
        
        .${ns}-typing-indicator {
          display: flex;
          align-items: center;
          margin-bottom: 10px;
        }
        
        .${ns}-typing-indicator span {
          height: 8px;
          width: 8px;
          background-color: #6b7280;
          border-radius: 50%;
          display: inline-block;
          margin-right: 2px;
          animation: ${ns}-typing 1.4s infinite both;
        }
        
        .${ns}-typing-indicator span:nth-child(2) {
          animation-delay: 0.2s;
        }
        
        .${ns}-typing-indicator span:nth-child(3) {
          animation-delay: 0.4s;
        }
        
        @keyframes ${ns}-typing {
          0% { transform: translateY(0px); }
          30% { transform: translateY(-5px); }
          60%, 100% { transform: translateY(0px); }
        }
        
        .${ns}-sending-spinner {
          display: flex;
          align-items: center;
          align-self: flex-end;
          margin: 8px 20px 8px 0;
          opacity: 0;
          transition: opacity 0.3s ease;
        }
        
        .${ns}-sending-spinner.${ns}-active {
          opacity: 1;
        }
        
        .${ns}-sending-spinner-dots {
          display: flex;
        }
        
        .${ns}-sending-spinner-dots span {
          height: 8px;
          width: 8px;
          background-color: ${theme.primaryColor};
          border-radius: 50%;
          margin-right: 4px;
          animation: ${ns}-sending-pulse 1.5s infinite ease-in-out both;
        }
        
        @keyframes ${ns}-sending-pulse {
          0%, 80%, 100% { transform: scale(0.8); opacity: 0.6; }
          40% { transform: scale(1.2); opacity: 1; }
        }
        
        .${ns}-predefined-container {
          display: flex;
          flex-wrap: wrap;
          gap: 8px;
          padding: 10px;
        }
        
        .${ns}-predefined-button {
          border: none;
          border-radius: 16px;
          padding: 8px 16px;
          font-size: 14px;
          cursor: pointer;
          background-color: ${this.config.predefinedQuestions.buttonColor};
          color: ${this.config.predefinedQuestions.textColor};
        }
      `;
      
      const style = document.createElement('style');
      style.textContent = css;
      document.head.appendChild(style);
    }
    
    // Attach event listeners
    _attachEvents() {
      this.elements.button.addEventListener('click', () => this.toggleChat());
      this.elements.close.addEventListener('click', () => this.hideChat());
      this.elements.sendButton.addEventListener('click', () => this.sendMessage());
      this.elements.input.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') this.sendMessage();
      });
    }
    
    // Create predefined question buttons
    _createPredefinedButtons() {
      const { questions, position } = this.config.predefinedQuestions;
      if (!questions || questions.length === 0) return;
      
      const container = document.createElement('div');
      container.className = `${this.namespace}-predefined-container`;
      
      questions.forEach(q => {
        const button = document.createElement('button');
        button.className = `${this.namespace}-predefined-button`;
        button.textContent = q.text;
        button.addEventListener('click', () => {
          this._addMessage('user', q.text);
          this.sendMessage(q.value || q.text);
        });
        container.appendChild(button);
      });
      
      if (position === 'top') {
        this.elements.messages.insertBefore(container, this.elements.messages.firstChild);
      } else if (position === 'bottom') {
        this.elements.panel.insertBefore(container, this.elements.panel.lastChild);
      }
      
      this.elements.predefinedContainer = container;
    }
    
    // Show connection status (temporary)
    _showConnectionStatus(message) {
      // Remove existing status if any
      if (this.streamState.connectionStatus) {
        this.streamState.connectionStatus.remove();
      }
      
      // Create status message
      const statusDiv = document.createElement('div');
      statusDiv.className = `${this.namespace}-connection-status`;
      statusDiv.textContent = message;
      this.elements.messages.appendChild(statusDiv);
      
      // Store reference
      this.streamState.connectionStatus = statusDiv;
      
      // Auto-hide after 3 seconds
      setTimeout(() => {
        if (statusDiv && statusDiv.parentNode) {
          statusDiv.style.opacity = '0';
          setTimeout(() => {
            if (statusDiv && statusDiv.parentNode) {
              statusDiv.remove();
              if (this.streamState.connectionStatus === statusDiv) {
                this.streamState.connectionStatus = null;
              }
            }
          }, 500);
        }
      }, 3000);
    }
    
    // Connect to WebSocket
    connect() {
      try {
        if (this.socket) this.socket.close();
        
        this.socket = new WebSocket(this.config.websocket.url);
        
        this.socket.onopen = () => {
          this.isConnected = true;
          this._showConnectionStatus('Connected');
        };
        
        this.socket.onclose = () => {
          this.isConnected = false;
          this._showConnectionStatus('Disconnected');
        };
        
        this.socket.onerror = () => {
          this.isConnected = false;
          this._showConnectionStatus('Connection error');
        };
        
        this.socket.onmessage = (event) => {
          try {
            const data = JSON.parse(event.data);
            this._handleIncomingMessage(data);
          } catch (e) {
            console.error('Error parsing message:', e);
          }
        };
      } catch (error) {
        console.error('WebSocket connection error:', error);
      }
    }
    
    // Show/hide chat panel
    toggleChat() {
      if (this.elements.panel.style.display === 'flex') {
        this.hideChat();
      } else {
        this.showChat();
      }
    }
    
    showChat() {
      this.elements.panel.style.display = 'flex';
      if (!this.isConnected) this.connect();
    }
    
    hideChat() {
      this.elements.panel.style.display = 'none';
    }
    
    // Send a message
    sendMessage(text) {
      const message = text || this.elements.input.value.trim();
      if (!message) return;
      
      if (!text) {
        this._addMessage('user', message);
        this.elements.input.value = '';
      }
      
      this._showSendingSpinner();
      
      if (this.isConnected) {
        try {
          this.socket.send(JSON.stringify({
            type: 'message',
            content: message,
            chatId: this.config.chatId
          }));
        } catch (error) {
          console.error('Failed to send message:', error);
          this._removeSendingSpinner();
        }
      } else {
        this._showConnectionStatus('Not connected to server');
        this.connect();
        this._removeSendingSpinner();
      }
    }
    
    // Handle incoming messages
    _handleIncomingMessage(data) {
      if (data.type === 'error') {
        this._showConnectionStatus(data.content);
        this._removeSendingSpinner();
        return;
      }
      
      const messageId = data.messageId || `msg_${Date.now()}`;
      
      if (!this.streamState.isStreaming || this.streamState.currentMessageId !== messageId) {
        // Start a new message
        if (this.streamState.isStreaming) {
          this._finalizeMessage();
        }
        
        this.streamState.isStreaming = true;
        this.streamState.currentMessageId = messageId;
        this.streamState.activeMessageContent = '';
        
        // Create message container
        const container = document.createElement('div');
        container.className = `${this.namespace}-message-container ${this.namespace}-bot-container`;
        
        const avatar = document.createElement('div');
        avatar.className = `${this.namespace}-avatar ${this.namespace}-bot-avatar`;
        avatar.innerHTML = this.config.icons.botAvatar;
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `${this.namespace}-message ${this.namespace}-bot-message`;
        
        container.appendChild(avatar);
        container.appendChild(messageDiv);
        this.elements.messages.appendChild(container);
        
        this.streamState.currentBotMessage = messageDiv;
        this._removeSendingSpinner();
      }
      
      // Update message content
      this.streamState.activeMessageContent += data.content;
      
      try {
        const rawHtml = marked.parse(this.streamState.activeMessageContent);
        const sanitizedHtml = DOMPurify.sanitize(rawHtml);
        this.streamState.currentBotMessage.innerHTML = sanitizedHtml;
      } catch (e) {
        this.streamState.currentBotMessage.textContent = this.streamState.activeMessageContent;
      }
      
      // Scroll to bottom
      this.elements.messages.scrollTop = this.elements.messages.scrollHeight;
      
      // Finalize if this is the last chunk
      if (data.final) {
        this._finalizeMessage();
      }
    }
    
    // Finalize a streaming message
    _finalizeMessage() {
      this.streamState.isStreaming = false;
      this.streamState.currentBotMessage = null;
      this.streamState.activeMessageContent = '';
      this.streamState.currentMessageId = null;
    }
    
    // Add a message to the chat
    _addMessage(type, content) {
      if (type === 'system') {
        this._showConnectionStatus(content);
      } else {
        const isBot = type === 'bot';
        
        const container = document.createElement('div');
        container.className = `${this.namespace}-message-container ${isBot ? this.namespace + '-bot-container' : this.namespace + '-user-container'}`;
        
        const avatar = document.createElement('div');
        avatar.className = `${this.namespace}-avatar ${isBot ? this.namespace + '-bot-avatar' : this.namespace + '-user-avatar'}`;
        avatar.innerHTML = isBot ? this.config.icons.botAvatar : this.config.icons.userAvatar;
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `${this.namespace}-message ${isBot ? this.namespace + '-bot-message' : this.namespace + '-user-message'}`;
        
        if (isBot) {
          try {
            const rawHtml = marked.parse(content);
            const sanitizedHtml = DOMPurify.sanitize(rawHtml);
            messageDiv.innerHTML = sanitizedHtml;
          } catch (e) {
            messageDiv.textContent = content;
          }
        } else {
          messageDiv.textContent = content;
        }
        
        container.appendChild(avatar);
        container.appendChild(messageDiv);
        this.elements.messages.appendChild(container);
      }
      
      this.elements.messages.scrollTop = this.elements.messages.scrollHeight;
    }
    
    // Show sending spinner
    _showSendingSpinner() {
      if (this.streamState.sendingSpinner) {
        this._removeSendingSpinner();
      }
      
      const spinner = document.createElement('div');
      spinner.className = `${this.namespace}-sending-spinner`;
      spinner.innerHTML = `
        <div class="${this.namespace}-sending-spinner-dots">
          <span></span><span></span><span></span>
        </div>
      `;
      
      this.elements.messages.appendChild(spinner);
      setTimeout(() => spinner.classList.add(`${this.namespace}-active`), 10);
      
      this.streamState.sendingSpinner = spinner;
      this.elements.messages.scrollTop = this.elements.messages.scrollHeight;
    }
    
    // Remove sending spinner
    _removeSendingSpinner() {
      if (this.streamState.sendingSpinner) {
        this.streamState.sendingSpinner.classList.remove(`${this.namespace}-active`);
        
        setTimeout(() => {
          if (this.streamState.sendingSpinner && this.streamState.sendingSpinner.parentNode) {
            this.streamState.sendingSpinner.remove();
          }
          this.streamState.sendingSpinner = null;
        }, 300);
      }
    }
  }
  
  // Register globally
  window.WebSocketChatWidget = WebSocketChatWidget;
})(window);
