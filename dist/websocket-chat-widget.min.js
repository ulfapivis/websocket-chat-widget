/**
 * WebSocketChatWidget - A customizable chat widget that connects to a WebSocket server
 * @version 1.0.1
 */
!function(e){"use strict";if(!e.DOMPurify)return void console.error("WebSocketChatWidget requires DOMPurify. Please include it in your page.");if(!e.marked)return void console.error("WebSocketChatWidget requires marked.js. Please include it in your page.");const n={websocket:{url:"wss://apivisflow.onrender.com/nodes/chatagent",autoConnect:!0},chatId:"",theme:{primaryColor:"#2563eb",secondaryColor:"#1e40af",userMessageBg:"#dbeafe",userMessageText:"#1e40af",botMessageBg:"#f3f4f6",botMessageText:"#1f2937",systemMessageBg:"#f3f4f6",systemMessageText:"#4b5563"},size:{width:"380px",height:"550px",buttonSize:"60px"},position:{bottom:"20px",right:"20px"},text:{headerTitle:"Chat Support",welcomeMessage:"Welcome! How can I help you today?",inputPlaceholder:"Type your message...",connectionError:"Connection error. Please try again later.",sendError:"Failed to send message. Please try again."},icons:{chatButton:'<svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path></svg>',userAvatar:'<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="7" r="4"></circle><path d="M12 11c-2.21 0-4 1.79-4 4v5h8v-5c0-2.21-1.79-4-4-4z"></path></svg>',botAvatar:'<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="8" r="5"></circle><path d="M20 21v-2a7 7 0 0 0-14 0v2"></path></svg>',sendButton:'<svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><line x1="22" y1="2" x2="11" y2="13"></line><polygon points="22 2 15 22 11 13 2 9 22 2"></polygon></svg>'},predefinedQuestions:{enabled:!1,position:"top",style:"button",questions:[],buttonColor:"#3b82f6",textColor:"#ffffff",hoverColor:"#2563eb",hideAfterSelection:!1},sanitization:{input:"basic",output:!0}};e.WebSocketChatWidget=class{constructor(e){e&&e.chatId?(this.config=this._mergeConfig(n,e),this.socket=null,this.isConnected=!1,this.streamState={currentBotMessage:null,activeMessageContent:"",isStreaming:!1,typingIndicator:null,currentMessageId:null,sendingSpinner:null},this.elements={},this._setupDependencies(),this.namespace="ws-chat-"+Math.random().toString(36).substr(2,9),this._init()):console.error("WebSocketChatWidget: chatId is required")}_init(){this._createWidgetElements(),this._injectStyles(),this._attachEventListeners(),this.config.predefinedQuestions.enabled&&this._createPredefinedButtons(),this.config.websocket.autoConnect&&this._connectWebSocket()}_setupDependencies(){marked.setOptions({gfm:!0,breaks:!0,sanitize:!1,highlight:function(e,n){return e}})}_darkenColor(e,n){e=e.replace(/^#/,"");let t=parseInt(e.substring(0,2),16),s=parseInt(e.substring(2,4),16),i=parseInt(e.substring(4,6),16);return t=Math.floor(t*(100-n)/100),s=Math.floor(s*(100-n)/100),i=Math.floor(i*(100-n)/100),`#${t.toString(16).padStart(2,"0")}${s.toString(16).padStart(2,"0")}${i.toString(16).padStart(2,"0")}`}_mergeConfig(e,n){const t=JSON.parse(JSON.stringify(e));for(const e in n)n.hasOwnProperty(e)&&("object"!=typeof n[e]||null===n[e]||"object"!=typeof t[e]||null===t[e]||Array.isArray(n[e])?t[e]=n[e]:t[e]=this._mergeConfig(t[e],n[e]));return t}_isUrl(e){try{return e.startsWith("http://")||e.startsWith("https://")||e.startsWith("data:")||/^(www\.)[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)$/i.test(e)}catch(e){return!1}}_parseIconConfig(e){try{const n=JSON.parse(e);return n&&"object"==typeof n&&n.url?n:null}catch(e){return null}}_createIconElement(e,n=null){if(!e)return"";const t=this._parseIconConfig(e);if(t){const e=t.size||n||"24",s=t.size||n||"24";let i="max-width: 100%; height: auto;";return`<img src="${t.url}" width="${e}" height="${s}" alt="Icon" style="${i}">`}if(this._isUrl(e)){return`<img src="${e}" width="${n||"24"}" height="${n||"24"}" alt="Icon" style="max-width: 100%; height: auto;">`}return e}_createWidgetElements(){const e=document.createElement("button");e.id=`${this.namespace}-button`,e.className=`${this.namespace}-button`,e.innerHTML=this._createIconElement(this.config.icons.chatButton),document.body.appendChild(e),this.elements.chatButton=e;const n=document.createElement("div");n.id=`${this.namespace}-panel`,n.className=`${this.namespace}-panel`,document.body.appendChild(n),this.elements.chatPanel=n;const t=document.createElement("div");t.className=`${this.namespace}-header`;const s=document.createElement("div");s.textContent=this.config.text.headerTitle;const i=document.createElement("div");i.className=`${this.namespace}-close`,i.innerHTML="&times;",t.appendChild(s),t.appendChild(i),n.appendChild(t),this.elements.chatHeader=t,this.elements.closeButton=i;const a=document.createElement("div");if(a.className=`${this.namespace}-messages`,n.appendChild(a),this.elements.chatMessages=a,this.config.text.welcomeMessage){const e=document.createElement("div");e.className=`${this.namespace}-message-with-avatar ${this.namespace}-bot-message-container`;const n=document.createElement("div");n.className=`${this.namespace}-avatar ${this.namespace}-bot-avatar`,n.innerHTML=this._createIconElement(this.config.icons.botAvatar);const t=document.createElement("div");t.className=`${this.namespace}-message ${this.namespace}-bot-message`,t.textContent=this.config.text.welcomeMessage,e.appendChild(n),e.appendChild(t),a.appendChild(e)}const o=document.createElement("div");o.className=`${this.namespace}-input-container`;const r=document.createElement("input");r.type="text",r.className=`${this.namespace}-input`,r.placeholder=this.config.text.inputPlaceholder;const c=document.createElement("button");c.className=`${this.namespace}-send-button`,c.innerHTML=this._createIconElement(this.config.icons.sendButton),o.appendChild(r),o.appendChild(c),n.appendChild(o),this.elements.inputContainer=o,this.elements.chatInput=r,this.elements.sendButton=c}_createPredefinedButtons(){if(!this.config.predefinedQuestions.enabled||!this.config.predefinedQuestions.questions||0===this.config.predefinedQuestions.questions.length)return;const e=document.createElement("div");if(e.className=`${this.namespace}-predefined-container`,e.classList.add(`${this.namespace}-predefined-${this.config.predefinedQuestions.position}`),this.config.predefinedQuestions.questions.forEach((n=>{const t=document.createElement("button");t.className=`${this.namespace}-predefined-button`,t.classList.add(`${this.namespace}-predefined-${this.config.predefinedQuestions.style}`);const s=n.text&&"object"==typeof n.text?"":String(n.text||"");t.textContent=s,t.addEventListener("click",(()=>{let e=n.value||n.text;"object"==typeof e&&(e=s),this._handlePredefinedQuestion(e)})),e.appendChild(t)})),"top"===this.config.predefinedQuestions.position)this.elements.chatMessages.insertBefore(e,this.elements.chatMessages.firstChild);else if("bottom"===this.config.predefinedQuestions.position)this.elements.chatPanel.insertBefore(e,this.elements.inputContainer);else if("welcome"===this.config.predefinedQuestions.position){console.log("Trying to position predefined questions after welcome message"),console.log("Questions config:",this.config.predefinedQuestions),console.log("Number of questions:",this.config.predefinedQuestions.questions.length),e.classList.remove(`${this.namespace}-predefined-welcome`),e.classList.add(`${this.namespace}-predefined-top`),this.elements.chatMessages.insertBefore(e,this.elements.chatMessages.firstChild);const n=this.elements.chatMessages.querySelector(`.${this.namespace}-bot-message-container`);console.log("Welcome message found:",!!n),n&&(console.log("Welcome message element:",n),e.classList.remove(`${this.namespace}-predefined-top`),e.classList.add(`${this.namespace}-predefined-welcome`),this.elements.chatMessages.insertBefore(e,n.nextSibling),console.log("Container moved after welcome message"))}this.elements.predefinedContainer=e}_handlePredefinedQuestion(e){const n="object"==typeof e?e.toString&&"[object Object]"!==e.toString()?e.toString():"":String(e||"");this._addMessage("user",n),this.elements.chatInput.value="",this._showSendingSpinner(),this._sendMessage(e),this.config.predefinedQuestions.hideAfterSelection&&this.elements.predefinedContainer&&(this.elements.predefinedContainer.style.display="none")}_injectStyles(){const{theme:e,size:n,position:t}=this.config,s=this.namespace;let i=e.primaryColor;if(this.config.iconStyles&&this.config.iconStyles.chatButton){const e=this.config.iconStyles.chatButton;e.transparent?i="transparent":e.backgroundColor&&(i=e.backgroundColor)}const a=`\n        /* Chat Widget Styles */\n        .${s}-button {\n          position: fixed;\n          bottom: ${t.bottom};\n          right: ${t.right};\n          width: ${n.buttonSize};\n          height: ${n.buttonSize};\n          border-radius: 50%;\n          background-color: ${i};\n          color: white;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          cursor: pointer;\n          border: none;\n          box-shadow: 0 2px 10px rgba(0,0,0,0.2);\n          z-index: 9999;\n          transition: transform 0.2s;\n        }\n        \n        .${s}-button:hover {\n          transform: scale(1.05);\n        }\n        \n        .${s}-panel {\n          position: fixed;\n          bottom: calc(${t.bottom} + 80px);\n          right: ${t.right};\n          width: ${n.width};\n          height: ${n.height};\n          background: white;\n          border-radius: 10px;\n          box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n          display: none;\n          flex-direction: column;\n          overflow: hidden;\n          z-index: 9998;\n        }\n        \n        .${s}-header {\n          background: ${e.primaryColor};\n          color: white;\n          padding: 15px;\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          font-weight: bold;\n        }\n        \n        .${s}-close {\n          cursor: pointer;\n          font-size: 20px;\n        }\n        \n        .${s}-messages {\n          flex: 1;\n          padding: 15px;\n          overflow-y: auto;\n          display: flex;\n          flex-direction: column;\n        }\n        \n        .${s}-avatar {\n          width: 32px;\n          height: 32px;\n          border-radius: 50%;\n          color: white;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          flex-shrink: 0;\n        }\n        \n        .${s}-bot-avatar {\n          background-color: ${e.primaryColor};\n          margin-right: 10px;\n        }\n        \n        .${s}-user-avatar {\n          background-color: ${e.secondaryColor};\n          margin-left: 10px;\n        }\n        \n        .${s}-message-with-avatar {\n          display: flex;\n          align-items: flex-start;\n          max-width: 85%;\n          margin-bottom: 10px;\n          gap: 16px;\n        }\n        \n        .${s}-bot-message-container {\n          align-self: flex-start;\n        }\n        \n        .${s}-user-message-container {\n          align-self: flex-end;\n          flex-direction: row-reverse;\n          gap: 20px;\n        }\n        \n        .${s}-message {\n          max-width: 100%;\n          margin-bottom: 0;\n          padding: 10px 15px;\n          border-radius: 18px;\n          overflow-wrap: break-word;\n          overflow: hidden;\n        }\n        \n        .${s}-message p {\n          margin: 0 0 10px 0;\n        }\n        \n        .${s}-message p:last-child {\n          margin-bottom: 0;\n        }\n        \n        .${s}-system-message {\n          align-self: center;\n          background-color: ${e.systemMessageBg};\n          color: ${e.systemMessageText};\n          text-align: center;\n          border-radius: 8px;\n          padding: 8px 12px;\n          margin: 10px 0;\n          font-size: 0.875rem;\n          max-width: 85%;\n        }\n        \n        .${s}-connected-status {\n          color: #10b981; /* Green color for connected status */\n          font-weight: 500;\n          animation: fadeIn 0.3s ease-in;\n        }\n        \n        @keyframes fadeIn {\n          0% { opacity: 0; }\n          100% { opacity: 1; }\n        }\n        \n        .${s}-user-message {\n          align-self: flex-end;\n          background-color: ${e.userMessageBg};\n          color: ${e.userMessageText};\n          border-radius: 18px 18px 0 18px;\n        }\n        \n        .${s}-bot-message {\n          align-self: flex-start;\n          background-color: ${e.botMessageBg};\n          color: ${e.botMessageText};\n          border-radius: 18px 18px 18px 0;\n        }\n        \n        .${s}-input-container {\n          display: flex;\n          padding: 10px;\n          border-top: 1px solid #e5e7eb;\n        }\n        \n        .${s}-input {\n          flex: 1;\n          padding: 10px 15px;\n          border-radius: 24px;\n          border: 1px solid #d1d5db;\n          margin-right: 10px;\n          outline: none;\n          font-size: 16px;\n        }\n        \n        .${s}-input:focus {\n          border-color: ${e.primaryColor};\n        }\n        \n        .${s}-send-button {\n          background: ${e.primaryColor};\n          color: white;\n          border: none;\n          border-radius: 50%;\n          width: 40px;\n          height: 40px;\n          cursor: pointer;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        }\n        \n        .${s}-send-button:hover {\n          background: ${this._darkenColor(e.primaryColor,10)};\n        }\n        \n        /* Typing indicator */\n        .${s}-typing-indicator {\n          display: flex;\n          align-items: center;\n          margin-bottom: 10px;\n          align-self: flex-start;\n        }\n        \n        .${s}-typing-indicator span {\n          height: 8px;\n          width: 8px;\n          background-color: #6b7280;\n          border-radius: 50%;\n          display: inline-block;\n          margin-right: 2px;\n          animation: ${s}-typing 1.4s infinite both;\n        }\n        \n        .${s}-typing-indicator span:nth-child(2) {\n          animation-delay: 0.2s;\n        }\n        \n        .${s}-typing-indicator span:nth-child(3) {\n          animation-delay: 0.4s;\n        }\n        \n        @keyframes ${s}-typing {\n          0% { transform: translateY(0px); }\n          30% { transform: translateY(-5px); }\n          60%, 100% { transform: translateY(0px); }\n        }\n        \n        /* Sending spinner */\n        .${s}-sending-spinner {\n          display: flex;\n          align-items: center;\n          align-self: flex-end;\n          margin: 8px 20px 8px 0;\n          opacity: 0;\n          transition: opacity 0.3s ease;\n        }\n        \n        .${s}-sending-spinner.${s}-active {\n          opacity: 1;\n        }\n        \n        .${s}-sending-spinner-dots {\n          display: flex;\n        }\n        \n        .${s}-sending-spinner-dots span {\n          height: 8px;\n          width: 8px;\n          background-color: ${e.primaryColor};\n          border-radius: 50%;\n          margin-right: 4px;\n          animation: ${s}-sending-pulse 1.5s infinite ease-in-out both;\n        }\n        \n        .${s}-sending-spinner-dots span:nth-child(2) {\n          animation-delay: 0.2s;\n        }\n        \n        .${s}-sending-spinner-dots span:nth-child(3) {\n          animation-delay: 0.4s;\n          margin-right: 0;\n        }\n        \n        @keyframes ${s}-sending-pulse {\n          0%, 80%, 100% { transform: scale(0.8); opacity: 0.6; }\n          40% { transform: scale(1.2); opacity: 1; }\n        }\n        \n        /* Predefined questions */\n        .${s}-predefined-container {\n          display: flex;\n          flex-wrap: wrap;\n          gap: 8px;\n          padding: 10px 15px;\n        }\n        \n        .${s}-predefined-top {\n          border-bottom: 1px solid rgba(0,0,0,0.1);\n        }\n        \n        .${s}-predefined-bottom {\n          border-top: 1px solid rgba(0,0,0,0.1);\n        }\n        \n        .${s}-predefined-welcome {\n          margin-top: 5px;\n          margin-bottom: 10px;\n          background-color: rgba(0,0,0,0.02);\n          border-radius: 10px;\n        }\n        \n        .${s}-predefined-button {\n          border: none;\n          padding: 8px 16px;\n          font-size: ${this.config.predefinedQuestions.fontSize||"14px"};\n          cursor: pointer;\n          transition: background-color 0.2s;\n          ${this.config.predefinedQuestions.allowTextWrapping?"white-space: normal; ":"white-space: nowrap; text-overflow: ellipsis; overflow: hidden; max-width: 200px;"}\n          background-color: ${this.config.predefinedQuestions.buttonColor};\n          color: ${this.config.predefinedQuestions.textColor};\n        }\n        \n        .${s}-predefined-button:hover {\n          background-color: ${this.config.predefinedQuestions.hoverColor};\n        }\n        \n        .${s}-predefined-button {\n          border-radius: 16px;\n        }\n        \n        .${s}-predefined-pill {\n          border-radius: 24px;\n        }\n        \n        /* Markdown formatting for messages */\n        .${s}-message a {\n          color: ${e.primaryColor};\n          text-decoration: none;\n        }\n        .${s}-message a:hover {\n          text-decoration: underline;\n        }\n        .${s}-message code {\n          font-family: monospace;\n          background-color: rgba(0,0,0,0.05);\n          padding: 2px 4px;\n          border-radius: 4px;\n        }\n        .${s}-message pre {\n          background-color: rgba(0,0,0,0.05);\n          padding: 10px;\n          border-radius: 4px;\n          overflow-x: auto;\n        }\n        \n        /* Image formatting for messages */\n        .${s}-message img {\n          max-width: 100%;\n          height: auto;\n          border-radius: 4px;\n          margin: 4px 0;\n          display: block;\n        }\n        \n        /* Responsive styles for small screens (less than 800px width) */\n        @media (max-width: 800px) {\n          .${s}-panel {\n            width: calc(100% - 20px);\n            max-width: 100%;\n            right: 10px;\n            left: 10px;\n            height: 70vh;\n            max-height: 550px;\n            bottom: 70px;\n          }\n          \n          .${s}-button {\n            width: 50px;\n            height: 50px;\n            bottom: 10px;\n            right: 10px;\n          }\n          \n          .${s}-messages {\n            max-height: calc(70vh - 120px);\n          }\n          \n          .${s}-input-container {\n            padding: 8px;\n          }\n          \n          .${s}-input {\n            padding: 8px 12px;\n            font-size: 14px;\n          }\n          \n          .${s}-message-with-avatar {\n            max-width: 95%;\n          }\n          \n          .${s}-predefined-container {\n            padding: 8px;\n            gap: 5px;\n          }\n          \n          .${s}-predefined-button {\n            padding: 6px 12px;\n            font-size: 13px;\n          }\n        }\n      `,o=document.createElement("style");o.textContent=a,document.head.appendChild(o)}_attachEventListeners(){this.elements.chatButton.addEventListener("click",(()=>{this.toggleChat()})),this.elements.closeButton.addEventListener("click",(()=>{this.hideChat()})),this.elements.sendButton.addEventListener("click",(()=>{this.sendMessage()})),this.elements.chatInput.addEventListener("keypress",(e=>{"Enter"===e.key&&this.sendMessage()}))}destroy(){this.socket&&(this.socket.close(),this.socket=null),Object.values(this.elements).forEach((e=>{e&&e.parentNode&&e.parentNode.removeChild(e)}));document.querySelectorAll("style").forEach((e=>{e.textContent&&e.textContent.includes(this.namespace)&&e.parentNode.removeChild(e)})),this.elements={},this.streamState={currentBotMessage:null,activeMessageContent:"",isStreaming:!1,typingIndicator:null,currentMessageId:null,sendingSpinner:null}}_connectWebSocket(){try{this.socket&&this.socket.close(),this.socket=new WebSocket(this.config.websocket.url),this.socket.onopen=()=>{this.isConnected=!0,this._showConnectionStatus("Connected")},this.socket.onclose=()=>{this.isConnected=!1,this._addMessage("system","Connection closed. Please try again later.")},this.socket.onerror=()=>{this.isConnected=!1,this._addMessage("system","Connection error. Please try again later.")},this.socket.onmessage=e=>{try{const n=JSON.parse(e.data);n&&void 0!==n.content&&this._handleIncomingMessage(n)}catch(e){this._addMessage("system","Received message in an invalid format"),console.error("Error parsing message:",e)}}}catch(e){console.error("Failed to connect to WebSocket server:",e),this._addMessage("system","Failed to connect: "+e.message)}}_handleIncomingMessage(e){if("error"===e.type)return this._addMessage("system","Error: "+e.content),this._removeTypingIndicator(),void this._removeSendingSpinner();if(this._removeSendingSpinner(),"bot"===e.type||"message"===e.type||!e.type){this._removeTypingIndicator();const n=e.messageId||null;n&&this.streamState.currentMessageId===n?(this.streamState.activeMessageContent+=e.content,this._updateMessage("bot",this.streamState.activeMessageContent),!0===e.final&&(this.streamState.currentMessageId=null,this.streamState.activeMessageContent="",this.streamState.isStreaming=!1)):(this.streamState.isStreaming&&(this.streamState.isStreaming=!1,this.streamState.currentMessageId=null,this.streamState.activeMessageContent=""),this._addMessage("bot",e.content),n&&(this.streamState.isStreaming=!0,this.streamState.currentMessageId=n,this.streamState.activeMessageContent=e.content,this.streamState.currentBotMessage=this.elements.chatMessages.lastElementChild))}"typing"===e.type&&this._showTypingIndicator()}_updateMessage(e,n){if("bot"!==e||!this.streamState.currentBotMessage)return;const t=this.streamState.currentBotMessage.querySelector(`.${this.namespace}-bot-message`);if(t){if(this.config.sanitization.output){const e=marked.parse(n),s=DOMPurify.sanitize(e);t.innerHTML=s}else t.innerHTML=marked.parse(n);this._scrollToBottom()}}_showSendingSpinner(){this._removeSendingSpinner();const e=document.createElement("div");e.className=`${this.namespace}-sending-spinner`;const n=document.createElement("div");n.className=`${this.namespace}-sending-spinner-dots`;for(let e=0;e<3;e++){const e=document.createElement("span");n.appendChild(e)}e.appendChild(n),this.elements.chatMessages.appendChild(e),this.streamState.sendingSpinner=e,setTimeout((()=>{e&&e.parentNode&&e.classList.add(`${this.namespace}-active`)}),10)}_removeSendingSpinner(){this.streamState.sendingSpinner&&this.streamState.sendingSpinner.parentNode&&(this.streamState.sendingSpinner.parentNode.removeChild(this.streamState.sendingSpinner),this.streamState.sendingSpinner=null)}_showTypingIndicator(){if(this.streamState.typingIndicator&&this.streamState.typingIndicator.parentNode)return;const e=document.createElement("div");e.className=`${this.namespace}-typing-indicator`;for(let n=0;n<3;n++){const n=document.createElement("span");e.appendChild(n)}this.elements.chatMessages.appendChild(e),this.streamState.typingIndicator=e,this._scrollToBottom()}_removeTypingIndicator(){this.streamState.typingIndicator&&this.streamState.typingIndicator.parentNode&&(this.streamState.typingIndicator.parentNode.removeChild(this.streamState.typingIndicator),this.streamState.typingIndicator=null)}_showConnectionStatus(e){if("Connected"===e){const n=document.createElement("div");n.className=`${this.namespace}-system-message ${this.namespace}-connected-status`,n.textContent=e,this.elements.chatMessages.appendChild(n),setTimeout((()=>{n&&n.parentNode&&n.parentNode.removeChild(n)}),2e3),this._scrollToBottom()}else this._addMessage("system",e)}_addMessage(e,n){if(this.elements.chatMessages){if("system"===e){const e=document.createElement("div");e.className=`${this.namespace}-system-message`,e.textContent=n,this.elements.chatMessages.appendChild(e)}else if("user"===e){const e=document.createElement("div");e.className=`${this.namespace}-message-with-avatar ${this.namespace}-user-message-container`;const t=document.createElement("div");t.className=`${this.namespace}-avatar ${this.namespace}-user-avatar`,t.innerHTML=this._createIconElement(this.config.icons.userAvatar);const s=document.createElement("div");s.className=`${this.namespace}-message ${this.namespace}-user-message`,s.textContent=n,e.appendChild(t),e.appendChild(s),this.elements.chatMessages.appendChild(e)}else if("bot"===e){const e=document.createElement("div");e.className=`${this.namespace}-message-with-avatar ${this.namespace}-bot-message-container`;const t=document.createElement("div");t.className=`${this.namespace}-avatar ${this.namespace}-bot-avatar`,t.innerHTML=this._createIconElement(this.config.icons.botAvatar);const s=document.createElement("div");if(s.className=`${this.namespace}-message ${this.namespace}-bot-message`,this.config.sanitization.output){const e=marked.parse(n),t=DOMPurify.sanitize(e);s.innerHTML=t}else s.innerHTML=marked.parse(n);e.appendChild(t),e.appendChild(s),this.elements.chatMessages.appendChild(e)}this._scrollToBottom()}}_scrollToBottom(){this.elements.chatMessages&&(this.elements.chatMessages.scrollTop=this.elements.chatMessages.scrollHeight)}sendMessage(e){let n=e;if(!n){if(n=this.elements.chatInput.value.trim(),!n)return;this.elements.chatInput.value=""}this._addMessage("user",n),this._showSendingSpinner(),this._sendMessage(n)}_sendMessage(e){if(!this.isConnected)return this._addMessage("system","Not connected. Please try again later."),void this._removeSendingSpinner();try{const n={type:"user",content:"object"==typeof e?e.toString&&"[object Object]"!==e.toString()?e.toString():"":String(e||""),chatId:this.config.chatId};this.socket.send(JSON.stringify(n))}catch(e){console.error("Failed to send message:",e),this._addMessage("system",this.config.text.sendError),this._removeSendingSpinner()}}toggleChat(){"flex"===this.elements.chatPanel.style.display?this.hideChat():this.showChat()}showChat(){this.elements.chatPanel.style.display="flex",setTimeout((()=>{this.elements.chatInput&&this.elements.chatInput.focus()}),100),!this.isConnected&&this.config.websocket.autoConnect&&this._connectWebSocket(),this._scrollToBottom()}hideChat(){this.elements.chatPanel.style.display="none"}on(e,n){console.log(`Event '${e}' registered but handling not implemented yet`)}}}(window);
//# sourceMappingURL=websocket-chat-widget.min.js.map